"""Heat management module for LLMFed simulation."""

def calculate_match_heat(match: dict) -> int:
    """
    Calculates heat generated by a completed match.
    Expects a dict with 'heat' key.
    """
    return int(match.get("heat", 0))


def calculate_segment_heat(segment: dict) -> int:
    """
    Calculates heat from a segment.
    Expects a dict with 'heat' key.
    """
    return int(segment.get("heat", 0))


def update_wrestler_heat(wrestler, heat_change: int) -> int:
    """
    Modifies a wrestler's current_heat attribute by heat_change.
    Returns the updated heat.
    """
    current = getattr(wrestler, "current_heat", 0)
    new_heat = current + heat_change
    setattr(wrestler, "current_heat", new_heat)
    return new_heat


def update_feud_heat(feud: dict, heat_change: int) -> int:
    """
    Adjusts the heat level for a feud represented as a dict.
    Returns the updated heat.
    """
    current = feud.get("heat", 0)
    new_heat = current + heat_change
    feud["heat"] = new_heat
    return new_heat
